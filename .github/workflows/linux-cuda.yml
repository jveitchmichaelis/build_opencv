name: Build Linux CUDA/Cudnn

on: push

env:
  option_path: options/options_opencv4.9.0_contrib_cuda_cudnn_vc15.txt
jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: ["ubuntu:20.04","ubuntu:22.04", "ubuntu:23.04", "ubuntu:23.10"]
    container:
      image: ${{matrix.os}}
    steps:
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: false
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true
    - uses: actions/checkout@v2

    - name: Setup things in container
      run: |
        apt-get update
        apt-get install -y --no-install-recommends sudo wget git build-essential debconf-utils apt-utils dialog ca-certificates
        echo 'tzdata tzdata/Areas select Etc' | sudo debconf-set-selections
        echo 'tzdata tzdata/Zones/Etc select UTC' | sudo debconf-set-selections
        DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata
        
    - name: Download CUDA
      working-directory: scripts/linux
      run: |
        sudo ./download_cuda.sh

    - name: Download CUDNN8
      working-directory: scripts/linux
      run: |
        sudo ./download_cudnn.sh

    - name: Determine CUDA and cuDNN Versions
      run: |
        # Extract CUDA version
        CUDA_VERSION=$(dpkg -l | grep '^ii' | grep -E 'cuda-toolkit-[0-9]*-[0-9]*|nvidia-cuda-toolkit-[0-9]*-[0-9]*' | awk '{print $3}' | awk -F'[.~+]' '{print $1 "." $2}' | sort -u | head -n 1)
        echo "Extracted CUDA Version: $CUDA_VERSION"
        
        # Extract cuDNN version
        CUDNN_VERSION=$(dpkg -l | grep '^ii' | grep -E 'libcudnn|nvidia-cudnn' | awk '{print $3}' | awk -F'[.~+]' '{print $1 "." $2}' | sort -u | head -n 1)
        echo "Extracted CUDNN Version: $CUDNN_VERSION"
        
        # Set environment variables properly
        echo "CUDA_VERSION=$CUDA_VERSION" >> $GITHUB_ENV
        echo "CUDNN_VERSION=$CUDNN_VERSION" >> $GITHUB_ENV
      shell: bash

    - name: Download OpenCV repo/s
      run: |
        scripts/linux/download.sh $option_path

    - name: Patch stdlib
      run: |
        sudo sed -i '/_S_nothrow_init<.*>/ s/^/    \/\/ /' /usr/include/c++/*/bits/std_function.h
    
    - name: Build OpenCV
      run: |
        scripts/linux/build.sh $option_path

    - name: Remove build folder
      uses: JesseTG/rm@v1.0.3
      with:
        path: build

    - name: Create Tarball
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        asset_name=opencv-${{github.ref_name}}-${{ matrix.os }}-cuda$CUDA_VERSION-cudnn$CUDNN_VERSION.tar.gz
        asset_name=$(echo $asset_name | sed 's/:/-/g')
        tar -czf ${asset_name} install
        echo "ASSET_NAME=${asset_name}" >> $GITHUB_ENV

    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.ASSET_NAME }}
        tag_name: ${{ github.ref_name }}
        name: ${{ github.ref_name }}
        draft: false
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Calculate SHA256 Checksum
    - name: Calculate SHA256 Checksum
      run: |
        echo "Calculating SHA256 for ${{ env.ASSET_NAME }}"
        sha256sum ${{ env.ASSET_NAME }} > ${{ env.ASSET_NAME }}.sha256
      shell: bash

    - name: Upload SHA256 Checksum File
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.ASSET_NAME }}.sha256
        tag_name: ${{ github.ref_name }}
        name: ${{ github.ref_name }}
        draft: false
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
